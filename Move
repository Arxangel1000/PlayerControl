 public sealed class CSCharacterMovement : OnComponentSystem<CCharacter>
    {
        private MSimpleInput _input;
        private MGame _game;
        private MCamera _camera;

        private Vector3 _vector;
        private bool _gameIsActive;

        private float _smooth;
        
        protected override async UniTask OnSystemEnable()
        {
            _input = await Managers.ResolveAsync<MSimpleInput>();
            _game = await Managers.ResolveAsync<MGame>();
            _camera = await Managers.ResolveAsync<MCamera>();
            
            _game.CharacterIsMove
                .Subscribe(value =>
                {
                    _gameIsActive = value;

                    if (!_gameIsActive)
                    {
                        _vector = Vector3.zero;
                        
                        AffectedComponents.ForEach(c => c.CharacterController.Move(_vector));
                    }
                })
                .AddTo(LifetimeDisposables);

            _game.WinConditionReached
                .Subscribe(_ =>
                {
                    _game.CharacterIsMove.SetValueAndForceNotify(false);
                })
                .AddTo(LifetimeDisposables);
            
            _input.OnJoystickStart
                .Where(_ => _gameIsActive)
                .Subscribe(vector => _vector = Vector3.zero)
                .AddTo(LifetimeDisposables);
            
            _input.OnJoystickHold
                .Where(_ => _gameIsActive)
                .Subscribe(vector => _vector = vector)
                .AddTo(LifetimeDisposables);
            
            _input.OnJoystickEnd
                .Where(_ => _gameIsActive)
                .Subscribe(vector => _vector = Vector3.zero)
                .AddTo(LifetimeDisposables);
        }

        protected override void OnSystemDisable() { }

        protected override void OnComponentRegistered(CCharacter component)
        {
            Observable
                .EveryUpdate()
                .Where(_ => _gameIsActive)
                .Subscribe(_ =>
                {
                    Move(component);
                })
                .AddTo(component.LifetimeDisposables);
        }

        protected override void OnComponentUnregistered(CCharacter component) { }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void Move(CCharacter component)
        {
            Vector3 move = Vector3.zero;

            if (_vector.sqrMagnitude > 0.5f)
            {
                float angle = Mathf.Atan2(_vector.x, _vector.y) * Mathf.Rad2Deg + _camera.CamT.eulerAngles.y;
                float smoothAngle = Mathf.SmoothDampAngle(component.transform.eulerAngles.y, angle, ref _smooth, 0.05f);
                
                component.transform.rotation = Quaternion.Euler(0f, smoothAngle, 0f);

                move = Quaternion.Euler(0f, angle, 0f) * Vector3.forward;

                Vector3 next = component.transform.position + move * component.Speed * Time.deltaTime;

                Ray ray = new Ray { origin = next, direction = Vector3.down };

                if (!Physics.Raycast(ray, 1f, Layers.Ground)) return;
            }

            move.y = component.CharacterController.isGrounded ? 0f : component.Gravity * Time.deltaTime;

            component.CharacterController.Move(move * component.Speed * Time.deltaTime);
        }
    }
